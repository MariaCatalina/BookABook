package com.example.spring.controller;

import com.example.spring.CORSFilter;
import com.example.spring.frontendmodel.BookReturned;
import com.example.spring.frontendmodel.BookReturnedToLib;
import com.example.spring.frontendmodel.BorrowModel;
import com.example.spring.model.*;
import com.example.spring.repository.BookRepository;
import com.example.spring.repository.BorrowRepository;
import com.example.spring.repository.ReturnedBooksRepository;
import com.example.spring.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.persistence.criteria.Predicate;
import java.util.ArrayList;
import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/bookabook") // This means URL's start with /demo (after Application path)
public class BookController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BorrowRepository borrowRepository;

    @Autowired
    private ReturnedBooksRepository returnedBooksRepository;

    @Autowired
    private CORSFilter myCorsFilter;

    @PostMapping(path = "/addbook")
    @CrossOrigin(origins = "http://localhost:4200")
    public @ResponseBody
    void addBook(@RequestBody Book book) {//CORS

        User user = userRepository.findById(book.getUserID());
        System.out.println(user);
        if (user != null) {
            // check if the book exists and update the number
            Book oldBook = bookRepository.findByTitleAndAuthor(book.getTitle(), book.getAuthor());
            System.out.println("if found: " + oldBook);
            if (oldBook != null ) {
                oldBook.setNumberExemplars(oldBook.getNumberExemplars()+ 1);
                bookRepository.save(oldBook);
            } else {
                book.setNumberExemplars(1);
                bookRepository.save(book);
            }
            System.out.println("return success");
        }
    }

    @GetMapping(path="/getbook")
    @CrossOrigin(origins = "http://localhost:4200")
    public @ResponseBody Iterable<Book> getAllBook() {//CORS

        Iterable<Book> bookList = bookRepository.findAll();
        System.out.println("get all books " + bookList);

        List<Book> result = new ArrayList<>();
        // extract the books that are borrowed
        for (Book b: bookList){
            User user = this.userRepository.findById(b.getUserID());
            System.out.println("->>>> " + user);
            if (user != null && b.getNumberExemplars() > 0 && user.getState().equals("CREATED")) {
                result.add(b);
            }
        }
        return result;
    }

    @GetMapping(path="/getbook", params = {"bookID"})
    @CrossOrigin(origins = "http://localhost:4200")
    public @ResponseBody Book getBook(@RequestParam(value = "bookID") int bookID) {//CORS
        System.out.println("get all books");
        return bookRepository.findById(bookID);
    }

    @PostMapping(path="/borrow")
    @CrossOrigin(origins = "http://localhost:4200")
    public @ResponseBody
    StringResponse borrowBook(@RequestBody BorrowModel bModel){
        StringResponse response = new StringResponse();
        // check if user exits
        User user = userRepository.findById(bModel.getUserID());
        if (user == null ){
            return new StringResponse("error user not found");
        }

        Book book = bookRepository.findById(bModel.getBookID());
        if (book == null) {
            return new StringResponse("error book not found");
        }

        borrowRepository.save(new BorrowedBooks(bModel.getUserID(), bModel.getBookID(), bModel.getBorrower()));

        // update the number of books
        book.setNumberExemplars(book.getNumberExemplars() - 1);
        bookRepository.save(book);

        return new StringResponse("success");
    }

    @GetMapping(path="/getborrowed", params = {"userID"})
    @CrossOrigin(origins = "http://localhost:4200")
    public @ResponseBody Iterable<Book> getBooksBorrowed(@RequestParam(value = "userID") int userID) {//CORS
        System.out.println("get all books borrowed");
        List<BorrowedBooks> borrowedBooks = borrowRepository.findAllByBorrower(userID);
        List<Book> books = new ArrayList<>();

        for (BorrowedBooks borrowedBooks1: borrowedBooks){
            books.add(bookRepository.findById(borrowedBooks1.getBookID()));
        }

        return books;
    }

    @GetMapping(path="/getreturned", params = {"userID"})
    @CrossOrigin(origins = "http://localhost:4200")
    public @ResponseBody Iterable<BookReturned> getBooksReturned(@RequestParam(value = "userID") int userID) {//CORS
        System.out.println("get all books returned");
        List<ReturnedBooks> borrowedBooks = returnedBooksRepository.findAllByUserID(userID);
        List<BookReturned> booksList = new ArrayList<>();

        for (ReturnedBooks borrowedBooks1: borrowedBooks){
            BookReturned bookReturned = new BookReturned();
            Book book = bookRepository.findById(borrowedBooks1.getBookID());
            User user = userRepository.findById(borrowedBooks1.getBorrower());

            bookReturned.setAuthor(book.getAuthor());
            bookReturned.setTitle(book.getTitle());
            bookReturned.setUser(user.getEmail());
            bookReturned.setBookID(book.getId());

            booksList.add(bookReturned);
        }

        return booksList;
    }

    @PostMapping(path="/returnBookToProp")
    @CrossOrigin(origins = "http://localhost:4200")
    public @ResponseBody StringResponse returnBook(@RequestBody BorrowModel bModel){
        BorrowedBooks borrowedBooks = borrowRepository.findByBorrowerAndBookID(bModel.getUserID(), bModel.getBookID());
        if (borrowedBooks == null) {
            return new StringResponse("error book not found");
        }

        // save in returned and delete from borrowed
        returnedBooksRepository.save(new ReturnedBooks(borrowedBooks.getUserID(), borrowedBooks.getBookID(), borrowedBooks.getBorrower()));
        borrowRepository.delete(borrowedBooks);

        return new StringResponse("success");
    }

    @PostMapping(path="/returnBookToLib")
    @CrossOrigin(origins = "http://localhost:4200")
    public @ResponseBody StringResponse returnBookToAll(@RequestBody BookReturnedToLib bModel){
        User user = userRepository.findByEmail(bModel.getUserEmail());
        if (user == null) {
            return new StringResponse("error user not found");
        }

        ReturnedBooks borrowedBooks = returnedBooksRepository.findByBorrowerAndBookID(user.getId(), bModel.getBookID());
        if (borrowedBooks == null) {
            return new StringResponse("error book returned not found");
        }

        Book book = bookRepository.findById(bModel.getBookID());
        if (book == null) {
            return new StringResponse("error book not found");
        }

        // save in returned and increase number of book
        returnedBooksRepository.delete(borrowedBooks);

        book.setNumberExemplars(book.getNumberExemplars() + 1);
        bookRepository.save(book);

        user.setStars(user.getStars() - bModel.getStars());
        userRepository.save(user);

        return new StringResponse("success");
    }

}
