package com.example.spring.controller;

import com.example.spring.CORSFilter;
import com.example.spring.frontendmodel.DeleteUser;
import com.example.spring.frontendmodel.LoginUSer;
import com.example.spring.frontendmodel.Register;
import com.example.spring.model.StringResponse;
import com.example.spring.model.User;
import com.example.spring.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/bookabook") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private CORSFilter myCorsFilter;

    @PostMapping(path="/register")
    public @ResponseBody User registerUser(@RequestBody Register register) {
        // TODO check same email
        User old = this.userRepository.findByEmail(register.getEmail());

        if (old != null) {
            return null;
        }

        userRepository.save(new User(register.getEmail(), register.getPassword(), register.getRole(), 5, "CREATED"));
        User users = userRepository.findByEmail(register.getEmail());

        return users;
    }

    @PostMapping(path="/login")
    @CrossOrigin(origins = "http://localhost:4200")
    public @ResponseBody User loginUser(@RequestBody LoginUSer login) {//CORS

        User user = userRepository.findByEmailAndPassword(login.getEmail(), login.getPassword());
        System.out.println(user);
        if (user != null && user.getState().equals("CREATED")) {
            return user;
        }

        return null;
    }

    @GetMapping(path="/getUsers")
    public @ResponseBody List<User> getAllUsers(){
        List<User> users = this.userRepository.findAll();
        List<User> created = new ArrayList<>();
        for (User u: users){
            if (u.getState().equals("CREATED") && !u.getEmail().contains("admin")){
                created.add(u);
            }
        }
        return created;
    }

    @PostMapping(path="/delete")
    public @ResponseBody
    StringResponse deleteUser(@RequestBody DeleteUser deleteUser) {
        User user = this.userRepository.findById(deleteUser.getUserID());
        if (user == null){
            return new StringResponse("error");
        }

        user.setState("DELETED");
        this.userRepository.save(user);
        return new StringResponse("success");
    }


}